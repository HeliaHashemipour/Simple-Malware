import platform as p
import json
import psutil
import logging
import socket
import re
import uuid
import subprocess
import datetime
import time
import locale

host = '127.0.0.1' # server ip
port = 31106 # server port


def getSystem_Info():  # get system information
    try:
        system_info = {
            'Host Name': socket.gethostname(),
            'Platform Name': p.system(),
            'Platform Version': p.version(),
            'Platform Release': p.release(),
            'Platform architecture': p.machine(),
            # 'Platform Processor': p.processor(),
            'Platform node': p.node(),
            'Platform': p.platform(),
            'os ': p.sys.version,
            'IP Address': socket.gethostbyname(socket.gethostname()),
            'mac-address': ':'.join(re.findall('..', '%012x' % uuid.getnode())),
            'System Boot Time': str(datetime.datetime.fromtimestamp(psutil.boot_time()).strftime("%Y-%m-%d %H:%M:%S")),
            'Original Install Date': subprocess.check_output('ls -lct --full-time / | tail -1 | cut -d" " -f6,7', shell=True).decode('utf-8').strip(),
            'Product ID': subprocess.check_output('dmidecode -s system-uuid', shell=True).decode('utf-8').strip(),
            'System Manufacturer': subprocess.check_output('dmidecode -s system-manufacturer', shell=True).decode('utf-8').strip(),
            'System Model Name': subprocess.check_output('dmidecode -s system-product-name', shell=True).decode('utf-8').strip(),
            'Bios Vendor': subprocess.check_output('dmidecode -s bios-vendor', shell=True).decode('utf-8').strip(),
            'Bios Version': subprocess.check_output('dmidecode -s bios-version', shell=True).decode('utf-8').strip(),
            'Bios Release Date': subprocess.check_output('dmidecode -s bios-release-date', shell=True).decode('utf-8').strip(),
            'Timezone': str(datetime.timezone(datetime.timedelta(seconds=-time.timezone), time.tzname[0])),
            'System Locale': str(locale.getlocale()),
            'Available Virtual Memory': str(round(psutil.virtual_memory().available / (1024.0 ** 3)))+" GB",
            'Used Virtual Memory': str(round(psutil.virtual_memory().used / (1024.0 ** 3)))+" GB",
            'Domain': socket.getfqdn().split('.', 1),
            'Users': psutil.users(),
            'Disk Partitions': psutil.disk_partitions(),
            'Memory Virtual': dict(psutil.virtual_memory()._asdict()),
            'CPU Times': psutil.cpu_times()
        }

        with open("/proc/cpuinfo", "r") as f:
            file_info = f.readlines()
            cpuinfo = [x.strip().split(":")[1]
                       for x in file_info if "model name" in x]
            system_info.update({'Proccess': str(cpuinfo)})
        return json.dumps(system_info)  # return system information

    except Exception as e:
        logging.exception(e)


if __name__ == '__main__':
    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
        sysInfo = json.loads(getSystem_Info())
        s.connect((host, port))
        for key, value in sysInfo.items():
            s.sendall(bytes(key + ": " + str(value), 'utf-8'))
            data = s.recv(1024)
            print('Received', repr(data))
