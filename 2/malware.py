import platform as p
import json
import psutil
import logging
import socket
import re
import uuid
import subprocess
import datetime
import time
import locale

host = '127.0.0.1'
port = 31106


def getSystem_Info():
    try:
        system_info = {
            'platform': p.system(),
            'platform-version': p.version(),
            'platform-release': p.release(),
            'architecture': p.machine(),
            'hostname': socket.gethostname(),
            'registered-user': p.processor(),
            'ip-address': socket.gethostbyname(socket.gethostname()),
            'mac-address': ':'.join(re.findall('..', '%012x' % uuid.getnode())),
            'system-boot-time': str(datetime.datetime.fromtimestamp(psutil.boot_time()).strftime("%Y-%m-%d %H:%M:%S")),
            'original-install-date': subprocess.check_output('ls -lct --full-time / | tail -1 | cut -d" " -f6,7', shell=True).decode('utf-8').strip(),
            # 'product-id': subprocess.check_output('dmidecode -s system-uuid', shell=True).decode('utf-8').strip(),
            # 'system-manufacturer': subprocess.check_output('dmidecode -s system-manufacturer', shell=True).decode('utf-8').strip(),
            # 'system-model-name': subprocess.check_output('dmidecode -s system-product-name', shell=True).decode('utf-8').strip(),
            # 'system-type': subprocess.check_output('dmidecode -s system-version', shell=True).decode('utf-8').strip(),
            'total-pysical-memory': str(round(psutil.virtual_memory().total / (1024.0 ** 3)))+" GB",
            # 'bios_vendor': subprocess.check_output('dmidecode -s bios-vendor', shell=True).decode('utf-8').strip(),
            # 'bios_version': subprocess.check_output('dmidecode -s bios-version', shell=True).decode('utf-8').strip(),
            'timezone': str(datetime.timezone(datetime.timedelta(seconds=-time.timezone), time.tzname[0])),
            # 'input-locales': subprocess.check_output('localectl | grep "Input"', shell=True).decode('utf-8').strip(),
            'system-locale': str(locale.getlocale()),
            'Available Virtual Memory': str(round(psutil.virtual_memory().available / (1024.0 ** 3)))+" GB",
            'Used Virtual Memory': str(round(psutil.virtual_memory().used / (1024.0 ** 3)))+" GB",
            'Domain': socket.getfqdn().split('.', 1)
        }
        return json.dumps(system_info)
    except Exception as e:
        logging.exception(e)


if __name__ == '__main__':
    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
        sysInfo = json.loads(getSystem_Info())
        s.connect((host, port))
        for key, value in sysInfo.items():
            s.sendall(bytes(key + ": " + str(value), 'utf-8'))
            data = s.recv(1024)
            print('Received', repr(data))

    # print('Server is closed')
